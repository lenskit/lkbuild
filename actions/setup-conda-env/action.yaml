name: 'Bootstrap LensKit Conda Environment'
description: 'Bootstraps a Conda-based build environment for LensKit CI.'
inputs:
  python-version:
    description: 'Python version to install'
    required: true
    default: '3.9'
  activate-environment:
    description: 'Create and activate the specified Conda environment name'
    required: true
    default: lktest
  blas-implementation:
    description: 'BLAS implementation to activate'
    required: false
  extras:
    description: 'Extras to include in the Conda environment, in addition to dev dependencies'
    required: false
  mixin:
    description: 'A mixin YAML file to include in the environment'
    required: false
  cache-number:
    description: 'Extra cache key for Conda download cache, increment to reset cache.'
    required: false
    default: '0'
  conda-type:
    description: 'The type of Anaconda installation to use for final provisioning'
    required: false
    default: conda
outputs:
  environment-file:
    description: "The environment file created by the lock stage"
    value: ${{ steps.conda-lock.outputs.environment-file }}
runs:
  using: "composite"
  steps:
    - name: Copy bootstrap environment
      shell: bash
      run: |
        cp -v "$ACTPATH/../../boot-env.yml" boot-env.yml
      env:
        ACTPATH: ${{ github.action_path }}

    - name: Backup bashrc
      shell: bash
      run: |
        if [ -f "$HOME/.bash_profile" ]; then
          cp $HOME/.bash_profile $HOME/.bash_profile.premm
        fi

    - name: ðŸ‘¢ Create bootstrap environment
      uses: mamba-org/provision-with-micromamba@main
      with:
        environment-name: lkboot
        environment-file: boot-env.yml
        cache-env: true

    - name: ðŸ”’ Prepare Conda environment spec
      id: conda-lock
      shell: bash -l {0}
      run: |
        e_opts=
        if [ -n "$BLAS_IMPL" ]; then
          e_opts="$e_opts -b $BLAS_IMPL"
        fi
        if [ -n "$EXTRAS" ]; then
          for extra in $(echo "$EXTRAS" |sed -e 's/,/ /g'); do
            e_opts="$e_opts -e $extra"
          done
        fi

        if [ -n "${{inputs.mixin}}" ]; then
          e_opts="$e_opts -m ${{inputs.mixin}}"
        fi

        echo "extra options: $e_opts"
        lkbuild dev-lock -v $PYVER $e_opts --gh-set-output
      env:
        EXTRAS: ${{ inputs.extras }}
        PYVER: ${{ inputs.python-version }}
        BLAS_IMPL: ${{ inputs.blas-implementation }}

    - name: Restore bashrc
      shell: bash
      if: inputs.conda-type != 'micromamba'  # micromamba reuses current init
      run: |
        if [ -f "$HOME/.bash_profile.premm" ]; then
          mv $HOME/.bash_profile.premm $HOME/.bash_profile
        else
          rm "$HOME/.bash_profile"
        fi

    - name: âš’ Initialize Conda environment
      id: conda-init
      uses: conda-incubator/setup-miniconda@v2
      if: inputs.activate-environment && inputs.conda-type == 'conda'
      with:
        activate-environment: ${{ inputs.activate-environment }}
        environment-file: ${{steps.conda-lock.outputs.environment-file}}

    - name: Initialze Micromamba environment
      id: mm-init
      uses: mamba-org/provision-with-micromamba@main
      if: inputs.activate-environment && inputs.conda-type == 'micromamba'
      with:
        environment-name: ${{ inputs.activate-environment }}
        environment-file: ${{ steps.conda-lock.outputs.environment-file }}
        cache-env: true
